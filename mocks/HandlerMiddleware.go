// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	dto "d-and-d/internal/dto"

	fiber "github.com/gofiber/fiber/v2"

	mock "github.com/stretchr/testify/mock"
)

// HandlerMiddleware is an autogenerated mock type for the HandlerMiddleware type
type HandlerMiddleware struct {
	mock.Mock
}

type HandlerMiddleware_Expecter struct {
	mock *mock.Mock
}

func (_m *HandlerMiddleware) EXPECT() *HandlerMiddleware_Expecter {
	return &HandlerMiddleware_Expecter{mock: &_m.Mock}
}

// On provides a mock function with given fields: fn
func (_m *HandlerMiddleware) On(fn func(*fiber.Ctx) dto.HandlerResponse) func(*fiber.Ctx) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for On")
	}

	var r0 func(*fiber.Ctx) error
	if rf, ok := ret.Get(0).(func(func(*fiber.Ctx) dto.HandlerResponse) func(*fiber.Ctx) error); ok {
		r0 = rf(fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(*fiber.Ctx) error)
		}
	}

	return r0
}

// HandlerMiddleware_On_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'On'
type HandlerMiddleware_On_Call struct {
	*mock.Call
}

// On is a helper method to define mock.On call
//   - fn func(*fiber.Ctx) dto.HandlerResponse
func (_e *HandlerMiddleware_Expecter) On(fn interface{}) *HandlerMiddleware_On_Call {
	return &HandlerMiddleware_On_Call{Call: _e.mock.On("On", fn)}
}

func (_c *HandlerMiddleware_On_Call) Run(run func(fn func(*fiber.Ctx) dto.HandlerResponse)) *HandlerMiddleware_On_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*fiber.Ctx) dto.HandlerResponse))
	})
	return _c
}

func (_c *HandlerMiddleware_On_Call) Return(_a0 func(*fiber.Ctx) error) *HandlerMiddleware_On_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HandlerMiddleware_On_Call) RunAndReturn(run func(func(*fiber.Ctx) dto.HandlerResponse) func(*fiber.Ctx) error) *HandlerMiddleware_On_Call {
	_c.Call.Return(run)
	return _c
}

// NewHandlerMiddleware creates a new instance of HandlerMiddleware. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandlerMiddleware(t interface {
	mock.TestingT
	Cleanup(func())
}) *HandlerMiddleware {
	mock := &HandlerMiddleware{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
