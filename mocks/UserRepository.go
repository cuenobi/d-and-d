// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	model "d-and-d/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

type UserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepository) EXPECT() *UserRepository_Expecter {
	return &UserRepository_Expecter{mock: &_m.Mock}
}

// CreateCharacter provides a mock function with given fields: character
func (_m *UserRepository) CreateCharacter(character *model.Character) error {
	ret := _m.Called(character)

	if len(ret) == 0 {
		panic("no return value specified for CreateCharacter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Character) error); ok {
		r0 = rf(character)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_CreateCharacter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCharacter'
type UserRepository_CreateCharacter_Call struct {
	*mock.Call
}

// CreateCharacter is a helper method to define mock.On call
//   - character *model.Character
func (_e *UserRepository_Expecter) CreateCharacter(character interface{}) *UserRepository_CreateCharacter_Call {
	return &UserRepository_CreateCharacter_Call{Call: _e.mock.On("CreateCharacter", character)}
}

func (_c *UserRepository_CreateCharacter_Call) Run(run func(character *model.Character)) *UserRepository_CreateCharacter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Character))
	})
	return _c
}

func (_c *UserRepository_CreateCharacter_Call) Return(_a0 error) *UserRepository_CreateCharacter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepository_CreateCharacter_Call) RunAndReturn(run func(*model.Character) error) *UserRepository_CreateCharacter_Call {
	_c.Call.Return(run)
	return _c
}

// CreateQuest provides a mock function with given fields: quest
func (_m *UserRepository) CreateQuest(quest *model.Quest) error {
	ret := _m.Called(quest)

	if len(ret) == 0 {
		panic("no return value specified for CreateQuest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Quest) error); ok {
		r0 = rf(quest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_CreateQuest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateQuest'
type UserRepository_CreateQuest_Call struct {
	*mock.Call
}

// CreateQuest is a helper method to define mock.On call
//   - quest *model.Quest
func (_e *UserRepository_Expecter) CreateQuest(quest interface{}) *UserRepository_CreateQuest_Call {
	return &UserRepository_CreateQuest_Call{Call: _e.mock.On("CreateQuest", quest)}
}

func (_c *UserRepository_CreateQuest_Call) Run(run func(quest *model.Quest)) *UserRepository_CreateQuest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Quest))
	})
	return _c
}

func (_c *UserRepository_CreateQuest_Call) Return(_a0 error) *UserRepository_CreateQuest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepository_CreateQuest_Call) RunAndReturn(run func(*model.Quest) error) *UserRepository_CreateQuest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: user
func (_m *UserRepository) CreateUser(user *model.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - user *model.User
func (_e *UserRepository_Expecter) CreateUser(user interface{}) *UserRepository_CreateUser_Call {
	return &UserRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", user)}
}

func (_c *UserRepository_CreateUser_Call) Run(run func(user *model.User)) *UserRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.User))
	})
	return _c
}

func (_c *UserRepository_CreateUser_Call) Return(_a0 error) *UserRepository_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepository_CreateUser_Call) RunAndReturn(run func(*model.User) error) *UserRepository_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCharacter provides a mock function with given fields: characterID, userID
func (_m *UserRepository) DeleteCharacter(characterID string, userID string) error {
	ret := _m.Called(characterID, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCharacter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(characterID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_DeleteCharacter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCharacter'
type UserRepository_DeleteCharacter_Call struct {
	*mock.Call
}

// DeleteCharacter is a helper method to define mock.On call
//   - characterID string
//   - userID string
func (_e *UserRepository_Expecter) DeleteCharacter(characterID interface{}, userID interface{}) *UserRepository_DeleteCharacter_Call {
	return &UserRepository_DeleteCharacter_Call{Call: _e.mock.On("DeleteCharacter", characterID, userID)}
}

func (_c *UserRepository_DeleteCharacter_Call) Run(run func(characterID string, userID string)) *UserRepository_DeleteCharacter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *UserRepository_DeleteCharacter_Call) Return(_a0 error) *UserRepository_DeleteCharacter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepository_DeleteCharacter_Call) RunAndReturn(run func(string, string) error) *UserRepository_DeleteCharacter_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteQuest provides a mock function with given fields: questID, userID
func (_m *UserRepository) DeleteQuest(questID string, userID string) error {
	ret := _m.Called(questID, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteQuest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(questID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_DeleteQuest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteQuest'
type UserRepository_DeleteQuest_Call struct {
	*mock.Call
}

// DeleteQuest is a helper method to define mock.On call
//   - questID string
//   - userID string
func (_e *UserRepository_Expecter) DeleteQuest(questID interface{}, userID interface{}) *UserRepository_DeleteQuest_Call {
	return &UserRepository_DeleteQuest_Call{Call: _e.mock.On("DeleteQuest", questID, userID)}
}

func (_c *UserRepository_DeleteQuest_Call) Run(run func(questID string, userID string)) *UserRepository_DeleteQuest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *UserRepository_DeleteQuest_Call) Return(_a0 error) *UserRepository_DeleteQuest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepository_DeleteQuest_Call) RunAndReturn(run func(string, string) error) *UserRepository_DeleteQuest_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllCharacter provides a mock function with no fields
func (_m *UserRepository) GetAllCharacter() ([]*model.Character, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllCharacter")
	}

	var r0 []*model.Character
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*model.Character, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*model.Character); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Character)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_GetAllCharacter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCharacter'
type UserRepository_GetAllCharacter_Call struct {
	*mock.Call
}

// GetAllCharacter is a helper method to define mock.On call
func (_e *UserRepository_Expecter) GetAllCharacter() *UserRepository_GetAllCharacter_Call {
	return &UserRepository_GetAllCharacter_Call{Call: _e.mock.On("GetAllCharacter")}
}

func (_c *UserRepository_GetAllCharacter_Call) Run(run func()) *UserRepository_GetAllCharacter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UserRepository_GetAllCharacter_Call) Return(_a0 []*model.Character, _a1 error) *UserRepository_GetAllCharacter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_GetAllCharacter_Call) RunAndReturn(run func() ([]*model.Character, error)) *UserRepository_GetAllCharacter_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllQuest provides a mock function with no fields
func (_m *UserRepository) GetAllQuest() ([]*model.Quest, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllQuest")
	}

	var r0 []*model.Quest
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*model.Quest, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*model.Quest); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Quest)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_GetAllQuest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllQuest'
type UserRepository_GetAllQuest_Call struct {
	*mock.Call
}

// GetAllQuest is a helper method to define mock.On call
func (_e *UserRepository_Expecter) GetAllQuest() *UserRepository_GetAllQuest_Call {
	return &UserRepository_GetAllQuest_Call{Call: _e.mock.On("GetAllQuest")}
}

func (_c *UserRepository_GetAllQuest_Call) Run(run func()) *UserRepository_GetAllQuest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UserRepository_GetAllQuest_Call) Return(_a0 []*model.Quest, _a1 error) *UserRepository_GetAllQuest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_GetAllQuest_Call) RunAndReturn(run func() ([]*model.Quest, error)) *UserRepository_GetAllQuest_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUsername provides a mock function with given fields: username
func (_m *UserRepository) GetUserByUsername(username string) (*model.User, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.User, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_GetUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsername'
type UserRepository_GetUserByUsername_Call struct {
	*mock.Call
}

// GetUserByUsername is a helper method to define mock.On call
//   - username string
func (_e *UserRepository_Expecter) GetUserByUsername(username interface{}) *UserRepository_GetUserByUsername_Call {
	return &UserRepository_GetUserByUsername_Call{Call: _e.mock.On("GetUserByUsername", username)}
}

func (_c *UserRepository_GetUserByUsername_Call) Run(run func(username string)) *UserRepository_GetUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserRepository_GetUserByUsername_Call) Return(_a0 *model.User, _a1 error) *UserRepository_GetUserByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_GetUserByUsername_Call) RunAndReturn(run func(string) (*model.User, error)) *UserRepository_GetUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// HasUsername provides a mock function with given fields: username
func (_m *UserRepository) HasUsername(username string) (bool, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for HasUsername")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_HasUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasUsername'
type UserRepository_HasUsername_Call struct {
	*mock.Call
}

// HasUsername is a helper method to define mock.On call
//   - username string
func (_e *UserRepository_Expecter) HasUsername(username interface{}) *UserRepository_HasUsername_Call {
	return &UserRepository_HasUsername_Call{Call: _e.mock.On("HasUsername", username)}
}

func (_c *UserRepository_HasUsername_Call) Run(run func(username string)) *UserRepository_HasUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserRepository_HasUsername_Call) Return(_a0 bool, _a1 error) *UserRepository_HasUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_HasUsername_Call) RunAndReturn(run func(string) (bool, error)) *UserRepository_HasUsername_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCharacter provides a mock function with given fields: userID, character, privacyUpdate
func (_m *UserRepository) UpdateCharacter(userID string, character *model.Character, privacyUpdate bool) error {
	ret := _m.Called(userID, character, privacyUpdate)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCharacter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *model.Character, bool) error); ok {
		r0 = rf(userID, character, privacyUpdate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_UpdateCharacter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCharacter'
type UserRepository_UpdateCharacter_Call struct {
	*mock.Call
}

// UpdateCharacter is a helper method to define mock.On call
//   - userID string
//   - character *model.Character
//   - privacyUpdate bool
func (_e *UserRepository_Expecter) UpdateCharacter(userID interface{}, character interface{}, privacyUpdate interface{}) *UserRepository_UpdateCharacter_Call {
	return &UserRepository_UpdateCharacter_Call{Call: _e.mock.On("UpdateCharacter", userID, character, privacyUpdate)}
}

func (_c *UserRepository_UpdateCharacter_Call) Run(run func(userID string, character *model.Character, privacyUpdate bool)) *UserRepository_UpdateCharacter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*model.Character), args[2].(bool))
	})
	return _c
}

func (_c *UserRepository_UpdateCharacter_Call) Return(_a0 error) *UserRepository_UpdateCharacter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepository_UpdateCharacter_Call) RunAndReturn(run func(string, *model.Character, bool) error) *UserRepository_UpdateCharacter_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateQuest provides a mock function with given fields: userID, quest, privacyUpdate
func (_m *UserRepository) UpdateQuest(userID string, quest *model.Quest, privacyUpdate bool) error {
	ret := _m.Called(userID, quest, privacyUpdate)

	if len(ret) == 0 {
		panic("no return value specified for UpdateQuest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *model.Quest, bool) error); ok {
		r0 = rf(userID, quest, privacyUpdate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_UpdateQuest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateQuest'
type UserRepository_UpdateQuest_Call struct {
	*mock.Call
}

// UpdateQuest is a helper method to define mock.On call
//   - userID string
//   - quest *model.Quest
//   - privacyUpdate bool
func (_e *UserRepository_Expecter) UpdateQuest(userID interface{}, quest interface{}, privacyUpdate interface{}) *UserRepository_UpdateQuest_Call {
	return &UserRepository_UpdateQuest_Call{Call: _e.mock.On("UpdateQuest", userID, quest, privacyUpdate)}
}

func (_c *UserRepository_UpdateQuest_Call) Run(run func(userID string, quest *model.Quest, privacyUpdate bool)) *UserRepository_UpdateQuest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*model.Quest), args[2].(bool))
	})
	return _c
}

func (_c *UserRepository_UpdateQuest_Call) Return(_a0 error) *UserRepository_UpdateQuest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepository_UpdateQuest_Call) RunAndReturn(run func(string, *model.Quest, bool) error) *UserRepository_UpdateQuest_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
