// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	constant "d-and-d/internal/constant"
	dto "d-and-d/internal/dto"

	fiber "github.com/gofiber/fiber/v2"

	mock "github.com/stretchr/testify/mock"

	model "d-and-d/internal/model"

	multipart "mime/multipart"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// Authentication provides a mock function with given fields: ctx, username, password
func (_m *UserService) Authentication(ctx *fiber.Ctx, username string, password string) (string, uint, error) {
	ret := _m.Called(ctx, username, password)

	if len(ret) == 0 {
		panic("no return value specified for Authentication")
	}

	var r0 string
	var r1 uint
	var r2 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, string, string) (string, uint, error)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, string, string) string); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*fiber.Ctx, string, string) uint); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Get(1).(uint)
	}

	if rf, ok := ret.Get(2).(func(*fiber.Ctx, string, string) error); ok {
		r2 = rf(ctx, username, password)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UserService_Authentication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authentication'
type UserService_Authentication_Call struct {
	*mock.Call
}

// Authentication is a helper method to define mock.On call
//   - ctx *fiber.Ctx
//   - username string
//   - password string
func (_e *UserService_Expecter) Authentication(ctx interface{}, username interface{}, password interface{}) *UserService_Authentication_Call {
	return &UserService_Authentication_Call{Call: _e.mock.On("Authentication", ctx, username, password)}
}

func (_c *UserService_Authentication_Call) Run(run func(ctx *fiber.Ctx, username string, password string)) *UserService_Authentication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserService_Authentication_Call) Return(_a0 string, _a1 uint, _a2 error) *UserService_Authentication_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *UserService_Authentication_Call) RunAndReturn(run func(*fiber.Ctx, string, string) (string, uint, error)) *UserService_Authentication_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAdmin provides a mock function with given fields: ctx, user
func (_m *UserService) CreateAdmin(ctx *fiber.Ctx, user *model.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateAdmin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, *model.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_CreateAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAdmin'
type UserService_CreateAdmin_Call struct {
	*mock.Call
}

// CreateAdmin is a helper method to define mock.On call
//   - ctx *fiber.Ctx
//   - user *model.User
func (_e *UserService_Expecter) CreateAdmin(ctx interface{}, user interface{}) *UserService_CreateAdmin_Call {
	return &UserService_CreateAdmin_Call{Call: _e.mock.On("CreateAdmin", ctx, user)}
}

func (_c *UserService_CreateAdmin_Call) Run(run func(ctx *fiber.Ctx, user *model.User)) *UserService_CreateAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx), args[1].(*model.User))
	})
	return _c
}

func (_c *UserService_CreateAdmin_Call) Return(_a0 error) *UserService_CreateAdmin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_CreateAdmin_Call) RunAndReturn(run func(*fiber.Ctx, *model.User) error) *UserService_CreateAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCharacter provides a mock function with given fields: ctx, character, images
func (_m *UserService) CreateCharacter(ctx *fiber.Ctx, character *model.Character, images []*multipart.FileHeader) error {
	ret := _m.Called(ctx, character, images)

	if len(ret) == 0 {
		panic("no return value specified for CreateCharacter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, *model.Character, []*multipart.FileHeader) error); ok {
		r0 = rf(ctx, character, images)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_CreateCharacter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCharacter'
type UserService_CreateCharacter_Call struct {
	*mock.Call
}

// CreateCharacter is a helper method to define mock.On call
//   - ctx *fiber.Ctx
//   - character *model.Character
//   - images []*multipart.FileHeader
func (_e *UserService_Expecter) CreateCharacter(ctx interface{}, character interface{}, images interface{}) *UserService_CreateCharacter_Call {
	return &UserService_CreateCharacter_Call{Call: _e.mock.On("CreateCharacter", ctx, character, images)}
}

func (_c *UserService_CreateCharacter_Call) Run(run func(ctx *fiber.Ctx, character *model.Character, images []*multipart.FileHeader)) *UserService_CreateCharacter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx), args[1].(*model.Character), args[2].([]*multipart.FileHeader))
	})
	return _c
}

func (_c *UserService_CreateCharacter_Call) Return(_a0 error) *UserService_CreateCharacter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_CreateCharacter_Call) RunAndReturn(run func(*fiber.Ctx, *model.Character, []*multipart.FileHeader) error) *UserService_CreateCharacter_Call {
	_c.Call.Return(run)
	return _c
}

// CreateQuest provides a mock function with given fields: ctx, quest, images
func (_m *UserService) CreateQuest(ctx *fiber.Ctx, quest *model.Quest, images []*multipart.FileHeader) error {
	ret := _m.Called(ctx, quest, images)

	if len(ret) == 0 {
		panic("no return value specified for CreateQuest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, *model.Quest, []*multipart.FileHeader) error); ok {
		r0 = rf(ctx, quest, images)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_CreateQuest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateQuest'
type UserService_CreateQuest_Call struct {
	*mock.Call
}

// CreateQuest is a helper method to define mock.On call
//   - ctx *fiber.Ctx
//   - quest *model.Quest
//   - images []*multipart.FileHeader
func (_e *UserService_Expecter) CreateQuest(ctx interface{}, quest interface{}, images interface{}) *UserService_CreateQuest_Call {
	return &UserService_CreateQuest_Call{Call: _e.mock.On("CreateQuest", ctx, quest, images)}
}

func (_c *UserService_CreateQuest_Call) Run(run func(ctx *fiber.Ctx, quest *model.Quest, images []*multipart.FileHeader)) *UserService_CreateQuest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx), args[1].(*model.Quest), args[2].([]*multipart.FileHeader))
	})
	return _c
}

func (_c *UserService_CreateQuest_Call) Return(_a0 error) *UserService_CreateQuest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_CreateQuest_Call) RunAndReturn(run func(*fiber.Ctx, *model.Quest, []*multipart.FileHeader) error) *UserService_CreateQuest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *UserService) CreateUser(ctx *fiber.Ctx, user *model.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, *model.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserService_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx *fiber.Ctx
//   - user *model.User
func (_e *UserService_Expecter) CreateUser(ctx interface{}, user interface{}) *UserService_CreateUser_Call {
	return &UserService_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *UserService_CreateUser_Call) Run(run func(ctx *fiber.Ctx, user *model.User)) *UserService_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx), args[1].(*model.User))
	})
	return _c
}

func (_c *UserService_CreateUser_Call) Return(_a0 error) *UserService_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_CreateUser_Call) RunAndReturn(run func(*fiber.Ctx, *model.User) error) *UserService_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCharacter provides a mock function with given fields: ctx, characterID
func (_m *UserService) DeleteCharacter(ctx *fiber.Ctx, characterID string) error {
	ret := _m.Called(ctx, characterID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCharacter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, string) error); ok {
		r0 = rf(ctx, characterID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_DeleteCharacter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCharacter'
type UserService_DeleteCharacter_Call struct {
	*mock.Call
}

// DeleteCharacter is a helper method to define mock.On call
//   - ctx *fiber.Ctx
//   - characterID string
func (_e *UserService_Expecter) DeleteCharacter(ctx interface{}, characterID interface{}) *UserService_DeleteCharacter_Call {
	return &UserService_DeleteCharacter_Call{Call: _e.mock.On("DeleteCharacter", ctx, characterID)}
}

func (_c *UserService_DeleteCharacter_Call) Run(run func(ctx *fiber.Ctx, characterID string)) *UserService_DeleteCharacter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx), args[1].(string))
	})
	return _c
}

func (_c *UserService_DeleteCharacter_Call) Return(_a0 error) *UserService_DeleteCharacter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_DeleteCharacter_Call) RunAndReturn(run func(*fiber.Ctx, string) error) *UserService_DeleteCharacter_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteQuest provides a mock function with given fields: ctx, questID
func (_m *UserService) DeleteQuest(ctx *fiber.Ctx, questID string) error {
	ret := _m.Called(ctx, questID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteQuest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, string) error); ok {
		r0 = rf(ctx, questID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_DeleteQuest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteQuest'
type UserService_DeleteQuest_Call struct {
	*mock.Call
}

// DeleteQuest is a helper method to define mock.On call
//   - ctx *fiber.Ctx
//   - questID string
func (_e *UserService_Expecter) DeleteQuest(ctx interface{}, questID interface{}) *UserService_DeleteQuest_Call {
	return &UserService_DeleteQuest_Call{Call: _e.mock.On("DeleteQuest", ctx, questID)}
}

func (_c *UserService_DeleteQuest_Call) Run(run func(ctx *fiber.Ctx, questID string)) *UserService_DeleteQuest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx), args[1].(string))
	})
	return _c
}

func (_c *UserService_DeleteQuest_Call) Return(_a0 error) *UserService_DeleteQuest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_DeleteQuest_Call) RunAndReturn(run func(*fiber.Ctx, string) error) *UserService_DeleteQuest_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllCharacter provides a mock function with given fields: ctx
func (_m *UserService) GetAllCharacter(ctx *fiber.Ctx) ([]dto.CharacterResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCharacter")
	}

	var r0 []dto.CharacterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) ([]dto.CharacterResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) []dto.CharacterResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.CharacterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*fiber.Ctx) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetAllCharacter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCharacter'
type UserService_GetAllCharacter_Call struct {
	*mock.Call
}

// GetAllCharacter is a helper method to define mock.On call
//   - ctx *fiber.Ctx
func (_e *UserService_Expecter) GetAllCharacter(ctx interface{}) *UserService_GetAllCharacter_Call {
	return &UserService_GetAllCharacter_Call{Call: _e.mock.On("GetAllCharacter", ctx)}
}

func (_c *UserService_GetAllCharacter_Call) Run(run func(ctx *fiber.Ctx)) *UserService_GetAllCharacter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx))
	})
	return _c
}

func (_c *UserService_GetAllCharacter_Call) Return(_a0 []dto.CharacterResponse, _a1 error) *UserService_GetAllCharacter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetAllCharacter_Call) RunAndReturn(run func(*fiber.Ctx) ([]dto.CharacterResponse, error)) *UserService_GetAllCharacter_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllQuest provides a mock function with given fields: ctx
func (_m *UserService) GetAllQuest(ctx *fiber.Ctx) ([]dto.QuestResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllQuest")
	}

	var r0 []dto.QuestResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) ([]dto.QuestResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) []dto.QuestResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.QuestResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*fiber.Ctx) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetAllQuest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllQuest'
type UserService_GetAllQuest_Call struct {
	*mock.Call
}

// GetAllQuest is a helper method to define mock.On call
//   - ctx *fiber.Ctx
func (_e *UserService_Expecter) GetAllQuest(ctx interface{}) *UserService_GetAllQuest_Call {
	return &UserService_GetAllQuest_Call{Call: _e.mock.On("GetAllQuest", ctx)}
}

func (_c *UserService_GetAllQuest_Call) Run(run func(ctx *fiber.Ctx)) *UserService_GetAllQuest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx))
	})
	return _c
}

func (_c *UserService_GetAllQuest_Call) Return(_a0 []dto.QuestResponse, _a1 error) *UserService_GetAllQuest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetAllQuest_Call) RunAndReturn(run func(*fiber.Ctx) ([]dto.QuestResponse, error)) *UserService_GetAllQuest_Call {
	_c.Call.Return(run)
	return _c
}

// GetClass provides a mock function with given fields: ctx
func (_m *UserService) GetClass(ctx *fiber.Ctx) ([]*model.Class, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetClass")
	}

	var r0 []*model.Class
	var r1 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) ([]*model.Class, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) []*model.Class); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Class)
		}
	}

	if rf, ok := ret.Get(1).(func(*fiber.Ctx) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetClass_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClass'
type UserService_GetClass_Call struct {
	*mock.Call
}

// GetClass is a helper method to define mock.On call
//   - ctx *fiber.Ctx
func (_e *UserService_Expecter) GetClass(ctx interface{}) *UserService_GetClass_Call {
	return &UserService_GetClass_Call{Call: _e.mock.On("GetClass", ctx)}
}

func (_c *UserService_GetClass_Call) Run(run func(ctx *fiber.Ctx)) *UserService_GetClass_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx))
	})
	return _c
}

func (_c *UserService_GetClass_Call) Return(_a0 []*model.Class, _a1 error) *UserService_GetClass_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetClass_Call) RunAndReturn(run func(*fiber.Ctx) ([]*model.Class, error)) *UserService_GetClass_Call {
	_c.Call.Return(run)
	return _c
}

// GetDifficultyLevel provides a mock function with given fields: ctx
func (_m *UserService) GetDifficultyLevel(ctx *fiber.Ctx) ([]*model.DifficultyLevels, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetDifficultyLevel")
	}

	var r0 []*model.DifficultyLevels
	var r1 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) ([]*model.DifficultyLevels, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) []*model.DifficultyLevels); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.DifficultyLevels)
		}
	}

	if rf, ok := ret.Get(1).(func(*fiber.Ctx) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetDifficultyLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDifficultyLevel'
type UserService_GetDifficultyLevel_Call struct {
	*mock.Call
}

// GetDifficultyLevel is a helper method to define mock.On call
//   - ctx *fiber.Ctx
func (_e *UserService_Expecter) GetDifficultyLevel(ctx interface{}) *UserService_GetDifficultyLevel_Call {
	return &UserService_GetDifficultyLevel_Call{Call: _e.mock.On("GetDifficultyLevel", ctx)}
}

func (_c *UserService_GetDifficultyLevel_Call) Run(run func(ctx *fiber.Ctx)) *UserService_GetDifficultyLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx))
	})
	return _c
}

func (_c *UserService_GetDifficultyLevel_Call) Return(_a0 []*model.DifficultyLevels, _a1 error) *UserService_GetDifficultyLevel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetDifficultyLevel_Call) RunAndReturn(run func(*fiber.Ctx) ([]*model.DifficultyLevels, error)) *UserService_GetDifficultyLevel_Call {
	_c.Call.Return(run)
	return _c
}

// GetRace provides a mock function with given fields: ctx
func (_m *UserService) GetRace(ctx *fiber.Ctx) ([]*model.Race, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetRace")
	}

	var r0 []*model.Race
	var r1 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) ([]*model.Race, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) []*model.Race); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Race)
		}
	}

	if rf, ok := ret.Get(1).(func(*fiber.Ctx) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetRace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRace'
type UserService_GetRace_Call struct {
	*mock.Call
}

// GetRace is a helper method to define mock.On call
//   - ctx *fiber.Ctx
func (_e *UserService_Expecter) GetRace(ctx interface{}) *UserService_GetRace_Call {
	return &UserService_GetRace_Call{Call: _e.mock.On("GetRace", ctx)}
}

func (_c *UserService_GetRace_Call) Run(run func(ctx *fiber.Ctx)) *UserService_GetRace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx))
	})
	return _c
}

func (_c *UserService_GetRace_Call) Return(_a0 []*model.Race, _a1 error) *UserService_GetRace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetRace_Call) RunAndReturn(run func(*fiber.Ctx) ([]*model.Race, error)) *UserService_GetRace_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveFiles provides a mock function with given fields: targets
func (_m *UserService) RemoveFiles(targets []string) error {
	ret := _m.Called(targets)

	if len(ret) == 0 {
		panic("no return value specified for RemoveFiles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(targets)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_RemoveFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveFiles'
type UserService_RemoveFiles_Call struct {
	*mock.Call
}

// RemoveFiles is a helper method to define mock.On call
//   - targets []string
func (_e *UserService_Expecter) RemoveFiles(targets interface{}) *UserService_RemoveFiles_Call {
	return &UserService_RemoveFiles_Call{Call: _e.mock.On("RemoveFiles", targets)}
}

func (_c *UserService_RemoveFiles_Call) Run(run func(targets []string)) *UserService_RemoveFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *UserService_RemoveFiles_Call) Return(_a0 error) *UserService_RemoveFiles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_RemoveFiles_Call) RunAndReturn(run func([]string) error) *UserService_RemoveFiles_Call {
	_c.Call.Return(run)
	return _c
}

// SaveImage provides a mock function with given fields: ctx, files, userID, imageType
func (_m *UserService) SaveImage(ctx *fiber.Ctx, files []*multipart.FileHeader, userID string, imageType constant.ImageStoragePath) ([]string, error) {
	ret := _m.Called(ctx, files, userID, imageType)

	if len(ret) == 0 {
		panic("no return value specified for SaveImage")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, []*multipart.FileHeader, string, constant.ImageStoragePath) ([]string, error)); ok {
		return rf(ctx, files, userID, imageType)
	}
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, []*multipart.FileHeader, string, constant.ImageStoragePath) []string); ok {
		r0 = rf(ctx, files, userID, imageType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(*fiber.Ctx, []*multipart.FileHeader, string, constant.ImageStoragePath) error); ok {
		r1 = rf(ctx, files, userID, imageType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_SaveImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveImage'
type UserService_SaveImage_Call struct {
	*mock.Call
}

// SaveImage is a helper method to define mock.On call
//   - ctx *fiber.Ctx
//   - files []*multipart.FileHeader
//   - userID string
//   - imageType constant.ImageStoragePath
func (_e *UserService_Expecter) SaveImage(ctx interface{}, files interface{}, userID interface{}, imageType interface{}) *UserService_SaveImage_Call {
	return &UserService_SaveImage_Call{Call: _e.mock.On("SaveImage", ctx, files, userID, imageType)}
}

func (_c *UserService_SaveImage_Call) Run(run func(ctx *fiber.Ctx, files []*multipart.FileHeader, userID string, imageType constant.ImageStoragePath)) *UserService_SaveImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx), args[1].([]*multipart.FileHeader), args[2].(string), args[3].(constant.ImageStoragePath))
	})
	return _c
}

func (_c *UserService_SaveImage_Call) Return(_a0 []string, _a1 error) *UserService_SaveImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_SaveImage_Call) RunAndReturn(run func(*fiber.Ctx, []*multipart.FileHeader, string, constant.ImageStoragePath) ([]string, error)) *UserService_SaveImage_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCharacter provides a mock function with given fields: ctx, character, files, privacyUpdate
func (_m *UserService) UpdateCharacter(ctx *fiber.Ctx, character *model.Character, files []*multipart.FileHeader, privacyUpdate bool) error {
	ret := _m.Called(ctx, character, files, privacyUpdate)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCharacter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, *model.Character, []*multipart.FileHeader, bool) error); ok {
		r0 = rf(ctx, character, files, privacyUpdate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_UpdateCharacter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCharacter'
type UserService_UpdateCharacter_Call struct {
	*mock.Call
}

// UpdateCharacter is a helper method to define mock.On call
//   - ctx *fiber.Ctx
//   - character *model.Character
//   - files []*multipart.FileHeader
//   - privacyUpdate bool
func (_e *UserService_Expecter) UpdateCharacter(ctx interface{}, character interface{}, files interface{}, privacyUpdate interface{}) *UserService_UpdateCharacter_Call {
	return &UserService_UpdateCharacter_Call{Call: _e.mock.On("UpdateCharacter", ctx, character, files, privacyUpdate)}
}

func (_c *UserService_UpdateCharacter_Call) Run(run func(ctx *fiber.Ctx, character *model.Character, files []*multipart.FileHeader, privacyUpdate bool)) *UserService_UpdateCharacter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx), args[1].(*model.Character), args[2].([]*multipart.FileHeader), args[3].(bool))
	})
	return _c
}

func (_c *UserService_UpdateCharacter_Call) Return(_a0 error) *UserService_UpdateCharacter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_UpdateCharacter_Call) RunAndReturn(run func(*fiber.Ctx, *model.Character, []*multipart.FileHeader, bool) error) *UserService_UpdateCharacter_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateQuest provides a mock function with given fields: ctx, quest, images, privacyUpdate
func (_m *UserService) UpdateQuest(ctx *fiber.Ctx, quest *model.Quest, images []*multipart.FileHeader, privacyUpdate bool) error {
	ret := _m.Called(ctx, quest, images, privacyUpdate)

	if len(ret) == 0 {
		panic("no return value specified for UpdateQuest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, *model.Quest, []*multipart.FileHeader, bool) error); ok {
		r0 = rf(ctx, quest, images, privacyUpdate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_UpdateQuest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateQuest'
type UserService_UpdateQuest_Call struct {
	*mock.Call
}

// UpdateQuest is a helper method to define mock.On call
//   - ctx *fiber.Ctx
//   - quest *model.Quest
//   - images []*multipart.FileHeader
//   - privacyUpdate bool
func (_e *UserService_Expecter) UpdateQuest(ctx interface{}, quest interface{}, images interface{}, privacyUpdate interface{}) *UserService_UpdateQuest_Call {
	return &UserService_UpdateQuest_Call{Call: _e.mock.On("UpdateQuest", ctx, quest, images, privacyUpdate)}
}

func (_c *UserService_UpdateQuest_Call) Run(run func(ctx *fiber.Ctx, quest *model.Quest, images []*multipart.FileHeader, privacyUpdate bool)) *UserService_UpdateQuest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx), args[1].(*model.Quest), args[2].([]*multipart.FileHeader), args[3].(bool))
	})
	return _c
}

func (_c *UserService_UpdateQuest_Call) Return(_a0 error) *UserService_UpdateQuest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_UpdateQuest_Call) RunAndReturn(run func(*fiber.Ctx, *model.Quest, []*multipart.FileHeader, bool) error) *UserService_UpdateQuest_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
